import getSupabaseClient from "../clients/getSupabaseClient";
import { TablesInsert } from "../types/database.types";
import { TLStoreSnapshot } from "@tldraw/tldraw";


/**
 * @returns Data from the `capsules` table
 */
async function getCapsules() {
    const supabase =  await getSupabaseClient()
    return supabase.from('capsules').select('*')
}


/**
 * @returns tld_snapshot from the `capsules` table
 */
export async function getCapsuleSnapshot(capsuleId: string): Promise<TLStoreSnapshot> {
    const supabase =  await getSupabaseClient()
    const { data, error } = await supabase.from('capsules').select('tld_snapshot').eq('id', capsuleId).single()
    if (error) {
        console.error("error getting capsule snapshot", error)
        throw error
    } else {
        return JSON.parse(data.tld_snapshot)
    }
}


/**
 * Sets tld_snapshot in the `capsules` table
 */
export async function setCapsuleSnapshot(capsuleId: string, snapshot: TLStoreSnapshot) {
    const supabase =  await getSupabaseClient()
    const _snapshot = [JSON.stringify(snapshot)]
    const { data, error } = await supabase.from('capsules').update({tld_snapshot: _snapshot}).eq('id', capsuleId)
    if (error) {
        console.error("error setting capsule snapshot", error)
        throw error
    } else {
        return data
    }
}


/**
 * Sets data in the `capsules` table
 * We use the "Tables" type generated by SUpabase - @see https://supabase.com/docs/reference/javascript/typescript-support
 */
export async function setCapsule(capsule: TablesInsert<'capsules'>) {
    const supabase =  await getSupabaseClient()
    const { data, error } = await supabase.from('capsules').upsert(capsule)
    if (error) {
        console.error("error setting capsule", error)
        throw error
    } else {
        return data
    }
}

/**
 * Get capsules created by a user
 */
export async function getCapsuleIdsByUserId(userId: string): Promise<string[]> {
    const supabase =  await getSupabaseClient()
    const { data, error } = await supabase.from('capsules').select('id').eq('created_by', userId)
    if (error) {
        console.error("error getting capsule id", error)
        throw error
    } else {
        return data.map((capsule: any) => capsule.id)
    }
}